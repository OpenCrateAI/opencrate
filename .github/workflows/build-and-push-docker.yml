name: Build and Push OpenCrate Docker Images

# This workflow runs ONLY on pushes to tags like "v1.0.0", "v1.2.3", etc.
# It can also be triggered manually from the GitHub Actions UI for testing.
on:
    push:
        tags:
            - 'v*.*.*'
    workflow_dispatch:

env:
    CACHE_IMAGE: braindotai/opencrate-build-cache:latest

jobs:
    build-and-push:
        name: Build and Push to Docker Hub
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Get the version from the Git ref
              # For tags like 'v1.2.3', VERSION becomes 'v1.2.3'.
              # For manual runs on a branch, VERSION becomes the branch name (e.g., 'main').
              id: get_version
              run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.10'

            - name: Install Python dependencies
              run: pip install rich loguru

            - name: Set up QEMU for Multi-Platform Builds
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Verify Docker Login
              run: |
                  echo "Verifying Docker Hub login..."
                  docker info
                  echo "Docker buildx version:"
                  docker buildx version

            - name: Debug Environment
              run: |
                  echo "VERSION: ${{ steps.get_version.outputs.VERSION }}"
                  echo "CACHE_IMAGE: ${{ env.CACHE_IMAGE }}"
                  echo "Current directory contents:"
                  ls -la
                  echo "Docker directory contents:"
                  ls -la docker/ || echo "Docker directory not found"
                  echo "Make version:"
                  make --version

            - name: Build and Push Multi-Platform Images
              env:
                  DOCKER_BUILDKIT: 1
              run: |
                  # Enable detailed logging
                  set -x
                  make gh-build-opencrate-all \
                      VERSION=${{ steps.get_version.outputs.VERSION }} \
                      DOCKER_BUILD_ARGS="--push --progress=plain --cache-from type=registry,ref=${{ env.CACHE_IMAGE }},ignore-error=true --cache-to type=registry,ref=${{ env.CACHE_IMAGE }},mode=max"

            - name: Tag and Push "latest" tag
              if: success() && github.ref_type == 'tag'
              run: |
                  set -x
                  make gh-release-latest \
                      VERSION=${{ steps.get_version.outputs.VERSION }}

            - name: Verify Images in Registry
              if: success()
              run: |
                  echo "Verifying images were pushed to registry..."
                  # List some of the expected images
                  SUPPORTED_PYTHONS="3.10 3.11"
                  for python_version in $SUPPORTED_PYTHONS; do
                      for runtime in cpu cuda; do
                          IMAGE_TAG="braindotai/opencrate-${runtime}-py${python_version}:${{ steps.get_version.outputs.VERSION }}"
                          echo "Checking if $IMAGE_TAG exists..."
                          docker buildx imagetools inspect "$IMAGE_TAG" || echo "Failed to inspect $IMAGE_TAG"
                      done
                  done