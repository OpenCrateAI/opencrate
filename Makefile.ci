SHELL := /bin/bash
PYTHON_VERSION ?= 3.10

.SILENT:
.ONESHELL:


# This target builds and tests a single Docker image for CI/CD workflows.
build:
# --- 1. Common Variable Setup ---
	if [ "$(RUNTIME)" = "cpu" ]; then
		CACHE_IMAGE_VAR="$(CACHE_IMAGE_CPU)";
	else
		CACHE_IMAGE_VAR="$(CACHE_IMAGE_CUDA)";
	fi;

	PULL_FLAG="";
	CACHE_TO_FLAG="";
	if [ "$(REBUILD_FLAG)" = "true" ]; then
		echo "!!! REBUILDING BASE LAYERS & REFRESHING CACHE !!!";
		PULL_FLAG="--pull";
		CACHE_TO_FLAG="--cache-to type=registry,ref=$$CACHE_IMAGE_VAR,mode=max";
	fi;

# --- 2. Mode-Specific Argument Setup ---
	PLATFORM_FLAG="";
	EXTRA_ARGS="";
	if [ "$(MODE)" = "test" ]; then
		echo "========== ● Building local image for testing: $(RUNTIME)-py$(PYTHON_VERSION):$(VERSION) ==========";
		PLATFORM_FLAG="--platform linux/amd64";
		EXTRA_ARGS="--load $$PULL_FLAG";
	elif [ "$(MODE)" = "push" ]; then
		echo "========== ● Building and pushing multi-platform image: $(RUNTIME)-py$(PYTHON_VERSION):$(VERSION) ==========";
		PLATFORM_FLAG="--platform linux/amd64,linux/arm64";
		EXTRA_ARGS="--push $$CACHE_TO_FLAG";
	else
		echo "!!!!!!!!!! ❌ ERROR: Invalid MODE specified. Must be 'test' or 'push'. !!!!!!!!!!!!";
		exit 1;
	fi;

# --- 3. The Docker Build Command ---
	IMAGE_TAG="braindotai/opencrate-$(RUNTIME)-py$(PYTHON_VERSION):$(VERSION)";
	DOCKERFILE_PATH="./docker/dockerfiles/Dockerfile.$(RUNTIME)-py$(PYTHON_VERSION)";
	if docker buildx build \
		$$PLATFORM_FLAG \
		-f "$$DOCKERFILE_PATH" \
		-t "$$IMAGE_TAG" \
		$$EXTRA_ARGS \
		--cache-from type=registry,ref=$$CACHE_IMAGE_VAR,ignore-error=true \
		.; then
		echo "========== ✓ Command completed successfully for MODE=$(MODE) ==========";
	else
		echo "!!!!!!!!!! ❌ FAILED during MODE=$(MODE) for image $$IMAGE_TAG !!!!!!!!!!!!";
		exit 1;
	fi


# This target pushes the images as the latest tag to the registry. Used in the CI/CD workflow if new git tag is created.
release:
	@echo "\n========== ● Tagging 'latest' for all images with version $(VERSION) ==========\n"
	@set -e; \
	PYTHON_VERSIONS="3.7 3.8 3.9 3.10 3.11 3.12"; \
	for python_version in $$PYTHON_VERSIONS; do \
		for runtime in cpu cuda; do \
			IMAGE_TAG="braindotai/opencrate-$$runtime-py$$python_version:$(VERSION)"; \
			LATEST_TAG="braindotai/opencrate-$$runtime-py$$python_version:latest"; \
			echo "Tagging $$IMAGE_TAG as $$LATEST_TAG"; \
			docker buildx imagetools create -t "$$LATEST_TAG" "$$IMAGE_TAG"; \
		done; \
	done; \
	echo "========== ✓ All images tagged as latest ==========";
