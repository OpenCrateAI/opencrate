# Multi-stage build to reduce final image size
FROM opencrate-base:v0.1.0 AS builder

# Set environment variables early
ENV PATH='/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/root/.cargo/bin:${PATH}' \
    CARGO_HOME=/usr/local/cargo \
    RUSTUP_HOME=/usr/local/rustup

# Install all dependencies and tools in a single layer with cleanup
RUN add-apt-repository ppa:deadsnakes/ppa -y && \
    apt update -y && \
    apt install -y --no-install-recommends \
        python3.7-distutils \
        python3.7-dev \
        curl \
        ca-certificates && \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
        --default-toolchain stable \
        --profile minimal \
        --no-modify-path && \
    curl -sS https://bootstrap.pypa.io/pip/3.7/get-pip.py | python3.7 && \
    python3.7 -m pip install --upgrade pip --root-user-action=ignore --no-cache-dir && \
    python3.7 -m pip install --no-cache-dir --upgrade --root-user-action=ignore \
        ipython \
        jupyter && \
    python3.7 -m pip cache purge && \
    apt-get purge -y curl && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* \
           /tmp/* \
           /var/tmp/* \
           /root/.cache \
           /usr/share/doc \
           /usr/share/man \
           /usr/share/locale

# Copy application files
WORKDIR /home/opencrate/
COPY pyproject.toml setup.cfg setup.py ./
COPY src/ ./src/

# Install the application
RUN python3.7 -m pip install -e . --no-cache-dir --root-user-action=ignore && \
    python3.7 -m pip cache purge

# Production stage - minimal runtime image
FROM opencrate-base:v0.1.0

# Copy only necessary Python runtime and installed packages
COPY --from=builder /usr/lib/python3.7 /usr/lib/python3.7
COPY --from=builder /usr/local/lib/python3.7 /usr/local/lib/python3.7
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /usr/local/cargo /usr/local/cargo
COPY --from=builder /usr/local/rustup /usr/local/rustup
COPY --from=builder /home/opencrate /home/opencrate

# Set environment variables
ENV PATH='/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/root/.cargo/bin:${PATH}' \
    CARGO_HOME=/usr/local/cargo \
    RUSTUP_HOME=/usr/local/rustup

# Create necessary directories and configure git in a single layer
RUN mkdir -p /root/.hooks/ /home/workspace/ && \
    git config --global --add safe.directory '*' && \
    git config --global init.defaultBranch main

# Copy hooks (do this last to avoid rebuilding when hooks change)
COPY .docker/hooks/ /root/.hooks/

WORKDIR /home/workspace/